{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet FeedComponent = class FeedComponent {\n  constructor(feedService) {\n    this.feedService = feedService;\n    this.entries = [];\n  }\n  ngOnInit() {\n    this.feedService.getFeedEntries().subscribe(data => {\n      this.entries = data.map(entry => {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(entry.description || '', 'text/html');\n        const text = doc.body.textContent || '';\n        // Buscar contenido visible y eliminar etiquetas técnicas\n        const cleanedText = text.replace(/Article URL:.*/gi, '').replace(/Comments URL:.*/gi, '').replace(/Points:.*/gi, '').replace(/# Comments:.*/gi, '').trim();\n        // Si el texto limpio es muy corto, usar comentarios o fecha\n        let summary = cleanedText.length > 40 ? cleanedText.slice(0, 200) : '';\n        if (!summary) {\n          const commentsMatch = text.match(/# Comments: \\d+/i);\n          const comments = commentsMatch ? commentsMatch[0] : '';\n          summary = `${comments} · ${entry.pubDate}`;\n        }\n        const imgEl = doc.querySelector('img');\n        const image = imgEl ? imgEl.src : null;\n        return {\n          ...entry,\n          summary,\n          cleanedDescription: cleanedText,\n          image,\n          visited: false,\n          expanded: false\n        };\n      }).sort((a, b) => new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime());\n    });\n  }\n};\nFeedComponent = __decorate([Component({\n  selector: 'app-feed',\n  templateUrl: './feed.component.html',\n  styleUrls: ['./feed.component.css']\n})], FeedComponent);\nexport { FeedComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}